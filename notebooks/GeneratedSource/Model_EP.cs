// <auto-generated />
#pragma warning disable 1570, 1591

using System;
using Microsoft.ML.Probabilistic;
using Microsoft.ML.Probabilistic.Distributions;
using Microsoft.ML.Probabilistic.Factors;
using Microsoft.ML.Probabilistic.Collections;

namespace Models
{
	/// <summary>
	/// Generated algorithm for performing inference.
	/// </summary>
	/// <remarks>
	/// If you wish to use this class directly, you must perform the following steps:
	/// 1) Create an instance of the class.
	/// 2) Set the value of any externally-set fields e.g. data, priors.
	/// 3) Call the Execute(numberOfIterations) method.
	/// 4) Use the XXXMarginal() methods to retrieve posterior marginals for different variables.
	/// 
	/// Generated by Infer.NET 0.3.1912.403 at 09:12 on Thursday, 04 February 2021.
	/// </remarks>
	public partial class Model_EP : IGeneratedAlgorithm
	{
		#region Fields
		/// <summary>True if Changed_vbool__0 has executed. Set this to false to force re-execution of Changed_vbool__0</summary>
		public bool Changed_vbool__0_isDone;
		/// <summary>True if Changed_vbool__0_vdouble__0 has executed. Set this to false to force re-execution of Changed_vbool__0_vdouble__0</summary>
		public bool Changed_vbool__0_vdouble__0_isDone;
		/// <summary>True if Changed_vbool__0_vdouble__1 has executed. Set this to false to force re-execution of Changed_vbool__0_vdouble__1</summary>
		public bool Changed_vbool__0_vdouble__1_isDone;
		/// <summary>True if Changed_vdouble__0 has executed. Set this to false to force re-execution of Changed_vdouble__0</summary>
		public bool Changed_vdouble__0_isDone;
		/// <summary>True if Changed_vdouble__1 has executed. Set this to false to force re-execution of Changed_vdouble__1</summary>
		public bool Changed_vdouble__1_isDone;
		/// <summary>Field backing the NumberOfIterationsDone property</summary>
		private int numberOfIterationsDone;
		/// <summary>Field backing the vbool__0 property</summary>
		private bool[] Vbool__0;
		public DistributionStructArray<Bernoulli,bool> vbool__0_marginal;
		/// <summary>Field backing the vdouble__0 property</summary>
		private double[] Vdouble__0;
		public DistributionStructArray<Gaussian,double> vdouble__0_marginal;
		/// <summary>Field backing the vdouble__1 property</summary>
		private double[] Vdouble__1;
		public DistributionStructArray<Gaussian,double> vdouble__1_marginal;
		/// <summary>Message to marginal of 'vdouble10'</summary>
		public Gaussian vdouble10_marginal_F;
		/// <summary>Message to marginal of 'vdouble13'</summary>
		public Gaussian vdouble13_marginal_F;
		/// <summary>Message to marginal of 'vdouble14'</summary>
		public Beta vdouble14_marginal_F;
		/// <summary>Message to marginal of 'vdouble4'</summary>
		public Gaussian vdouble4_marginal_F;
		/// <summary>Message to marginal of 'vdouble7'</summary>
		public Gaussian vdouble7_marginal_F;
		#endregion

		#region Properties
		/// <summary>The number of iterations done from the initial state</summary>
		public int NumberOfIterationsDone
		{
			get {
				return this.numberOfIterationsDone;
			}
		}

		/// <summary>The externally-specified value of 'vbool__0'</summary>
		public bool[] vbool__0
		{
			get {
				return this.Vbool__0;
			}
			set {
				if ((value!=null)&&(value.Length!=100)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+100)+" was expected for variable \'vbool__0\'");
				}
				this.Vbool__0 = value;
				this.numberOfIterationsDone = 0;
				this.Changed_vbool__0_vdouble__1_isDone = false;
				this.Changed_vbool__0_vdouble__0_isDone = false;
				this.Changed_vbool__0_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'vdouble__0'</summary>
		public double[] vdouble__0
		{
			get {
				return this.Vdouble__0;
			}
			set {
				if ((value!=null)&&(value.Length!=100)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+100)+" was expected for variable \'vdouble__0\'");
				}
				this.Vdouble__0 = value;
				this.numberOfIterationsDone = 0;
				this.Changed_vbool__0_vdouble__0_isDone = false;
				this.Changed_vdouble__0_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'vdouble__1'</summary>
		public double[] vdouble__1
		{
			get {
				return this.Vdouble__1;
			}
			set {
				if ((value!=null)&&(value.Length!=100)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+100)+" was expected for variable \'vdouble__1\'");
				}
				this.Vdouble__1 = value;
				this.numberOfIterationsDone = 0;
				this.Changed_vbool__0_vdouble__1_isDone = false;
				this.Changed_vdouble__1_isDone = false;
			}
		}

		#endregion

		#region Methods
		/// <summary>Computations that depend on the observed value of vbool__0</summary>
		private void Changed_vbool__0()
		{
			if (this.Changed_vbool__0_isDone) {
				return ;
			}
			this.vbool__0_marginal = new DistributionStructArray<Bernoulli,bool>(100, delegate(int index0) {
				return Bernoulli.Uniform();
			});
			this.vbool__0_marginal = Distribution.SetPoint<DistributionStructArray<Bernoulli,bool>,bool[]>(this.vbool__0_marginal, this.Vbool__0);
			Beta vBeta0 = Beta.Uniform();
			this.vdouble14_marginal_F = Beta.Uniform();
			DistributionStructArray<Beta,double> vdouble14_rep_B;
			// Create array for 'vdouble14_rep' Backwards messages.
			vdouble14_rep_B = new DistributionStructArray<Beta,double>(100);
			for(int index0 = 0; index0<100; index0++) {
				vdouble14_rep_B[index0] = Beta.Uniform();
				// Message to 'vdouble14_rep' from Bernoulli factor
				vdouble14_rep_B[index0] = BernoulliFromBetaOp.ProbTrueAverageConditional(this.Vbool__0[index0]);
			}
			Beta vdouble14_rep_B_toDef;
			// Message to 'vdouble14_rep' from Replicate factor
			vdouble14_rep_B_toDef = ReplicateOp_Divide.ToDefInit<Beta>(vBeta0);
			// Message to 'vdouble14_rep' from Replicate factor
			vdouble14_rep_B_toDef = ReplicateOp_Divide.ToDef<Beta>(vdouble14_rep_B, vdouble14_rep_B_toDef);
			// Message to 'vdouble14_marginal' from Variable factor
			this.vdouble14_marginal_F = VariableOp.MarginalAverageConditional<Beta>(vdouble14_rep_B_toDef, vBeta0, this.vdouble14_marginal_F);
			this.Changed_vbool__0_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of vbool__0 and vdouble__0</summary>
		private void Changed_vbool__0_vdouble__0()
		{
			if (this.Changed_vbool__0_vdouble__0_isDone) {
				return ;
			}
			Gaussian vdouble4_F = Gaussian.Uniform();
			this.vdouble4_marginal_F = Gaussian.Uniform();
			Gaussian vdouble4_rep_B_toDef;
			// Message to 'vdouble4_rep' from Replicate factor
			vdouble4_rep_B_toDef = ReplicateOp_Divide.ToDefInit<Gaussian>(vdouble4_F);
			// Message to 'vdouble4' from GaussianFromMeanAndVariance factor
			vdouble4_F = GaussianFromMeanAndVarianceOp.SampleAverageConditional(0.0, 10.0);
			// Create array for replicates of 'vdouble4_1__B'
			DistributionStructArray<Gaussian,double> vdouble4_1__B = new DistributionStructArray<Gaussian,double>(100);
			DistributionStructArray<Gaussian,double> vdouble4_rep_B;
			// Create array for 'vdouble4_rep' Backwards messages.
			vdouble4_rep_B = new DistributionStructArray<Gaussian,double>(100);
			for(int index0 = 0; index0<100; index0++) {
				vdouble4_rep_B[index0] = Gaussian.Uniform();
				if (!this.Vbool__0[index0]) {
					vdouble4_1__B[index0] = Gaussian.Uniform();
					// Message to 'vdouble4_1_' from GaussianFromMeanAndVariance factor
					vdouble4_1__B[index0] = GaussianFromMeanAndVarianceOp.MeanAverageConditional(this.Vdouble__0[index0], 1.0);
					// Message to 'vdouble4_rep' from Copy factor
					vdouble4_rep_B[index0] = ArrayHelper.SetTo<Gaussian>(vdouble4_rep_B[index0], vdouble4_1__B[index0]);
				}
			}
			// Message to 'vdouble4_rep' from Replicate factor
			vdouble4_rep_B_toDef = ReplicateOp_Divide.ToDef<Gaussian>(vdouble4_rep_B, vdouble4_rep_B_toDef);
			// Message to 'vdouble4_marginal' from Variable factor
			this.vdouble4_marginal_F = VariableOp.MarginalAverageConditional<Gaussian>(vdouble4_rep_B_toDef, vdouble4_F, this.vdouble4_marginal_F);
			Gaussian vdouble7_F = Gaussian.Uniform();
			this.vdouble7_marginal_F = Gaussian.Uniform();
			Gaussian vdouble7_rep_B_toDef;
			// Message to 'vdouble7_rep' from Replicate factor
			vdouble7_rep_B_toDef = ReplicateOp_Divide.ToDefInit<Gaussian>(vdouble7_F);
			// Message to 'vdouble7' from GaussianFromMeanAndVariance factor
			vdouble7_F = GaussianFromMeanAndVarianceOp.SampleAverageConditional(0.0, 10.0);
			// Create array for replicates of 'vdouble7_0__B'
			DistributionStructArray<Gaussian,double> vdouble7_0__B = new DistributionStructArray<Gaussian,double>(100);
			DistributionStructArray<Gaussian,double> vdouble7_rep_B;
			// Create array for 'vdouble7_rep' Backwards messages.
			vdouble7_rep_B = new DistributionStructArray<Gaussian,double>(100);
			for(int index0 = 0; index0<100; index0++) {
				vdouble7_rep_B[index0] = Gaussian.Uniform();
				if (this.Vbool__0[index0]) {
					vdouble7_0__B[index0] = Gaussian.Uniform();
					// Message to 'vdouble7_0_' from GaussianFromMeanAndVariance factor
					vdouble7_0__B[index0] = GaussianFromMeanAndVarianceOp.MeanAverageConditional(this.Vdouble__0[index0], 1.0);
					// Message to 'vdouble7_rep' from Copy factor
					vdouble7_rep_B[index0] = ArrayHelper.SetTo<Gaussian>(vdouble7_rep_B[index0], vdouble7_0__B[index0]);
				}
			}
			// Message to 'vdouble7_rep' from Replicate factor
			vdouble7_rep_B_toDef = ReplicateOp_Divide.ToDef<Gaussian>(vdouble7_rep_B, vdouble7_rep_B_toDef);
			// Message to 'vdouble7_marginal' from Variable factor
			this.vdouble7_marginal_F = VariableOp.MarginalAverageConditional<Gaussian>(vdouble7_rep_B_toDef, vdouble7_F, this.vdouble7_marginal_F);
			this.Changed_vbool__0_vdouble__0_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of vbool__0 and vdouble__1</summary>
		private void Changed_vbool__0_vdouble__1()
		{
			if (this.Changed_vbool__0_vdouble__1_isDone) {
				return ;
			}
			Gaussian vdouble10_F = Gaussian.Uniform();
			this.vdouble10_marginal_F = Gaussian.Uniform();
			Gaussian vdouble10_rep_B_toDef;
			// Message to 'vdouble10_rep' from Replicate factor
			vdouble10_rep_B_toDef = ReplicateOp_Divide.ToDefInit<Gaussian>(vdouble10_F);
			// Message to 'vdouble10' from GaussianFromMeanAndVariance factor
			vdouble10_F = GaussianFromMeanAndVarianceOp.SampleAverageConditional(0.0, 10.0);
			// Create array for replicates of 'vdouble10_1__B'
			DistributionStructArray<Gaussian,double> vdouble10_1__B = new DistributionStructArray<Gaussian,double>(100);
			DistributionStructArray<Gaussian,double> vdouble10_rep_B;
			// Create array for 'vdouble10_rep' Backwards messages.
			vdouble10_rep_B = new DistributionStructArray<Gaussian,double>(100);
			for(int index0 = 0; index0<100; index0++) {
				vdouble10_rep_B[index0] = Gaussian.Uniform();
				if (!this.Vbool__0[index0]) {
					vdouble10_1__B[index0] = Gaussian.Uniform();
					// Message to 'vdouble10_1_' from GaussianFromMeanAndVariance factor
					vdouble10_1__B[index0] = GaussianFromMeanAndVarianceOp.MeanAverageConditional(this.Vdouble__1[index0], 1.0);
					// Message to 'vdouble10_rep' from Copy factor
					vdouble10_rep_B[index0] = ArrayHelper.SetTo<Gaussian>(vdouble10_rep_B[index0], vdouble10_1__B[index0]);
				}
			}
			// Message to 'vdouble10_rep' from Replicate factor
			vdouble10_rep_B_toDef = ReplicateOp_Divide.ToDef<Gaussian>(vdouble10_rep_B, vdouble10_rep_B_toDef);
			// Message to 'vdouble10_marginal' from Variable factor
			this.vdouble10_marginal_F = VariableOp.MarginalAverageConditional<Gaussian>(vdouble10_rep_B_toDef, vdouble10_F, this.vdouble10_marginal_F);
			Gaussian vdouble13_F = Gaussian.Uniform();
			this.vdouble13_marginal_F = Gaussian.Uniform();
			Gaussian vdouble13_rep_B_toDef;
			// Message to 'vdouble13_rep' from Replicate factor
			vdouble13_rep_B_toDef = ReplicateOp_Divide.ToDefInit<Gaussian>(vdouble13_F);
			// Message to 'vdouble13' from GaussianFromMeanAndVariance factor
			vdouble13_F = GaussianFromMeanAndVarianceOp.SampleAverageConditional(0.0, 10.0);
			// Create array for replicates of 'vdouble13_0__B'
			DistributionStructArray<Gaussian,double> vdouble13_0__B = new DistributionStructArray<Gaussian,double>(100);
			DistributionStructArray<Gaussian,double> vdouble13_rep_B;
			// Create array for 'vdouble13_rep' Backwards messages.
			vdouble13_rep_B = new DistributionStructArray<Gaussian,double>(100);
			for(int index0 = 0; index0<100; index0++) {
				vdouble13_rep_B[index0] = Gaussian.Uniform();
				if (this.Vbool__0[index0]) {
					vdouble13_0__B[index0] = Gaussian.Uniform();
					// Message to 'vdouble13_0_' from GaussianFromMeanAndVariance factor
					vdouble13_0__B[index0] = GaussianFromMeanAndVarianceOp.MeanAverageConditional(this.Vdouble__1[index0], 1.0);
					// Message to 'vdouble13_rep' from Copy factor
					vdouble13_rep_B[index0] = ArrayHelper.SetTo<Gaussian>(vdouble13_rep_B[index0], vdouble13_0__B[index0]);
				}
			}
			// Message to 'vdouble13_rep' from Replicate factor
			vdouble13_rep_B_toDef = ReplicateOp_Divide.ToDef<Gaussian>(vdouble13_rep_B, vdouble13_rep_B_toDef);
			// Message to 'vdouble13_marginal' from Variable factor
			this.vdouble13_marginal_F = VariableOp.MarginalAverageConditional<Gaussian>(vdouble13_rep_B_toDef, vdouble13_F, this.vdouble13_marginal_F);
			this.Changed_vbool__0_vdouble__1_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of vdouble__0</summary>
		private void Changed_vdouble__0()
		{
			if (this.Changed_vdouble__0_isDone) {
				return ;
			}
			this.vdouble__0_marginal = new DistributionStructArray<Gaussian,double>(100, delegate(int index0) {
				return Gaussian.Uniform();
			});
			this.vdouble__0_marginal = Distribution.SetPoint<DistributionStructArray<Gaussian,double>,double[]>(this.vdouble__0_marginal, this.Vdouble__0);
			this.Changed_vdouble__0_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of vdouble__1</summary>
		private void Changed_vdouble__1()
		{
			if (this.Changed_vdouble__1_isDone) {
				return ;
			}
			this.vdouble__1_marginal = new DistributionStructArray<Gaussian,double>(100, delegate(int index0) {
				return Gaussian.Uniform();
			});
			this.vdouble__1_marginal = Distribution.SetPoint<DistributionStructArray<Gaussian,double>,double[]>(this.vdouble__1_marginal, this.Vdouble__1);
			this.Changed_vdouble__1_isDone = true;
		}

		/// <summary>Update all marginals, by iterating message passing the given number of times</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		/// <param name="initialise">If true, messages that initialise loops are reset when observed values change</param>
		private void Execute(int numberOfIterations, bool initialise)
		{
			this.Changed_vbool__0_vdouble__1();
			this.Changed_vbool__0_vdouble__0();
			this.Changed_vdouble__1();
			this.Changed_vdouble__0();
			this.Changed_vbool__0();
			this.numberOfIterationsDone = numberOfIterations;
		}

		/// <summary>Update all marginals, by iterating message-passing the given number of times</summary>
		/// <param name="numberOfIterations">The total number of iterations that should be executed for the current set of observed values.  If this is more than the number already done, only the extra iterations are done.  If this is less than the number already done, message-passing is restarted from the beginning.  Changing the observed values resets the iteration count to 0.</param>
		public void Execute(int numberOfIterations)
		{
			this.Execute(numberOfIterations, true);
		}

		/// <summary>Get the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		public object GetObservedValue(string variableName)
		{
			if (variableName=="vbool__0") {
				return this.vbool__0;
			}
			if (variableName=="vdouble__0") {
				return this.vdouble__0;
			}
			if (variableName=="vdouble__1") {
				return this.vdouble__1;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName)
		{
			if (variableName=="vdouble10") {
				return this.Vdouble10Marginal();
			}
			if (variableName=="vdouble13") {
				return this.Vdouble13Marginal();
			}
			if (variableName=="vdouble4") {
				return this.Vdouble4Marginal();
			}
			if (variableName=="vdouble7") {
				return this.Vdouble7Marginal();
			}
			if (variableName=="vdouble__1") {
				return this.Vdouble__1Marginal();
			}
			if (variableName=="vdouble__0") {
				return this.Vdouble__0Marginal();
			}
			if (variableName=="vbool__0") {
				return this.Vbool__0Marginal();
			}
			if (variableName=="vdouble14") {
				return this.Vdouble14Marginal();
			}
			throw new ArgumentException("This class was not built to infer "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName));
		}

		/// <summary>Get the query-specific marginal distribution of a variable.</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName, string query)
		{
			if (query=="Marginal") {
				return this.Marginal(variableName);
			}
			throw new ArgumentException(((("This class was not built to infer \'"+variableName)+"\' with query \'")+query)+"\'");
		}

		/// <summary>Get the query-specific marginal distribution of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName, string query)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName, query));
		}

		private void OnProgressChanged(ProgressChangedEventArgs e)
		{
			// Make a temporary copy of the event to avoid a race condition
			// if the last subscriber unsubscribes immediately after the null check and before the event is raised.
			EventHandler<ProgressChangedEventArgs> handler = this.ProgressChanged;
			if (handler!=null) {
				handler(this, e);
			}
		}

		/// <summary>Reset all messages to their initial values.  Sets NumberOfIterationsDone to 0.</summary>
		public void Reset()
		{
			this.Execute(0);
		}

		/// <summary>Set the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		/// <param name="value">Observed value</param>
		public void SetObservedValue(string variableName, object value)
		{
			if (variableName=="vbool__0") {
				this.vbool__0 = (bool[])value;
				return ;
			}
			if (variableName=="vdouble__0") {
				this.vdouble__0 = (double[])value;
				return ;
			}
			if (variableName=="vdouble__1") {
				this.vdouble__1 = (double[])value;
				return ;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>Update all marginals, by iterating message-passing an additional number of times</summary>
		/// <param name="additionalIterations">The number of iterations that should be executed, starting from the current message state.  Messages are not reset, even if observed values have changed.</param>
		public void Update(int additionalIterations)
		{
			this.Execute(checked(this.numberOfIterationsDone+additionalIterations), false);
		}

		/// <summary>
		/// Returns the marginal distribution for 'vbool__0' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Bernoulli,bool> Vbool__0Marginal()
		{
			return this.vbool__0_marginal;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble__0' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Gaussian,double> Vdouble__0Marginal()
		{
			return this.vdouble__0_marginal;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble__1' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Gaussian,double> Vdouble__1Marginal()
		{
			return this.vdouble__1_marginal;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble10' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Gaussian Vdouble10Marginal()
		{
			return this.vdouble10_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble13' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Gaussian Vdouble13Marginal()
		{
			return this.vdouble13_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble14' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Beta Vdouble14Marginal()
		{
			return this.vdouble14_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble4' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Gaussian Vdouble4Marginal()
		{
			return this.vdouble4_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble7' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Gaussian Vdouble7Marginal()
		{
			return this.vdouble7_marginal_F;
		}

		#endregion

		#region Events
		/// <summary>Event that is fired when the progress of inference changes, typically at the end of one iteration of the inference algorithm.</summary>
		public event EventHandler<ProgressChangedEventArgs> ProgressChanged;
		#endregion

	}

}

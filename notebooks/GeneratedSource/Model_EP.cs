// <auto-generated />
#pragma warning disable 1570, 1591

using System;
using Microsoft.ML.Probabilistic;
using Microsoft.ML.Probabilistic.Distributions;
using Microsoft.ML.Probabilistic.Factors;
using Microsoft.ML.Probabilistic.Collections;

namespace Models
{
	/// <summary>
	/// Generated algorithm for performing inference.
	/// </summary>
	/// <remarks>
	/// If you wish to use this class directly, you must perform the following steps:
	/// 1) Create an instance of the class.
	/// 2) Set the value of any externally-set fields e.g. data, priors.
	/// 3) Call the Execute(numberOfIterations) method.
	/// 4) Use the XXXMarginal() methods to retrieve posterior marginals for different variables.
	/// 
	/// Generated by Infer.NET 0.3.1912.403 at 15:53 on Tuesday, 09 February 2021.
	/// </remarks>
	public partial class Model_EP : IGeneratedAlgorithm
	{
		#region Fields
		/// <summary>True if Changed_vbool1 has executed. Set this to false to force re-execution of Changed_vbool1</summary>
		public bool Changed_vbool1_isDone;
		/// <summary>True if Changed_vbool1_vdouble0_vGaussian0 has executed. Set this to false to force re-execution of Changed_vbool1_vdouble0_vGaussian0</summary>
		public bool Changed_vbool1_vdouble0_vGaussian0_isDone;
		/// <summary>True if Changed_vbool1_vdouble0_vGaussian1 has executed. Set this to false to force re-execution of Changed_vbool1_vdouble0_vGaussian1</summary>
		public bool Changed_vbool1_vdouble0_vGaussian1_isDone;
		/// <summary>True if Changed_vbool1_vdouble1_vGaussian2 has executed. Set this to false to force re-execution of Changed_vbool1_vdouble1_vGaussian2</summary>
		public bool Changed_vbool1_vdouble1_vGaussian2_isDone;
		/// <summary>True if Changed_vbool1_vdouble1_vGaussian3 has executed. Set this to false to force re-execution of Changed_vbool1_vdouble1_vGaussian3</summary>
		public bool Changed_vbool1_vdouble1_vGaussian3_isDone;
		/// <summary>True if Changed_vdouble0 has executed. Set this to false to force re-execution of Changed_vdouble0</summary>
		public bool Changed_vdouble0_isDone;
		/// <summary>True if Changed_vdouble1 has executed. Set this to false to force re-execution of Changed_vdouble1</summary>
		public bool Changed_vdouble1_isDone;
		/// <summary>True if Changed_vGaussian0 has executed. Set this to false to force re-execution of Changed_vGaussian0</summary>
		public bool Changed_vGaussian0_isDone;
		/// <summary>True if Changed_vGaussian1 has executed. Set this to false to force re-execution of Changed_vGaussian1</summary>
		public bool Changed_vGaussian1_isDone;
		/// <summary>True if Changed_vGaussian2 has executed. Set this to false to force re-execution of Changed_vGaussian2</summary>
		public bool Changed_vGaussian2_isDone;
		/// <summary>True if Changed_vGaussian3 has executed. Set this to false to force re-execution of Changed_vGaussian3</summary>
		public bool Changed_vGaussian3_isDone;
		/// <summary>Field backing the NumberOfIterationsDone property</summary>
		private int numberOfIterationsDone;
		/// <summary>Field backing the vbool1 property</summary>
		private bool Vbool1;
		public Bernoulli vbool1_marginal;
		/// <summary>Field backing the vdouble0 property</summary>
		private double Vdouble0;
		public Gaussian vdouble0_marginal;
		/// <summary>Field backing the vdouble1 property</summary>
		private double Vdouble1;
		public Gaussian vdouble1_marginal;
		/// <summary>Message to marginal of 'vdouble10'</summary>
		public Gaussian vdouble10_marginal_F;
		/// <summary>Message from use of 'vdouble10'</summary>
		public Gaussian vdouble10_use_B;
		/// <summary>Message to marginal of 'vdouble13'</summary>
		public Gaussian vdouble13_marginal_F;
		/// <summary>Message from use of 'vdouble13'</summary>
		public Gaussian vdouble13_use_B;
		/// <summary>Message to marginal of 'vdouble14'</summary>
		public Beta vdouble14_marginal_F;
		/// <summary>Message to marginal of 'vdouble4'</summary>
		public Gaussian vdouble4_marginal_F;
		/// <summary>Message from use of 'vdouble4'</summary>
		public Gaussian vdouble4_use_B;
		/// <summary>Message to marginal of 'vdouble7'</summary>
		public Gaussian vdouble7_marginal_F;
		/// <summary>Message from use of 'vdouble7'</summary>
		public Gaussian vdouble7_use_B;
		/// <summary>Field backing the vGaussian0 property</summary>
		private Gaussian VGaussian0;
		public PointMass<Gaussian> vGaussian0_marginal;
		/// <summary>Field backing the vGaussian1 property</summary>
		private Gaussian VGaussian1;
		public PointMass<Gaussian> vGaussian1_marginal;
		/// <summary>Field backing the vGaussian2 property</summary>
		private Gaussian VGaussian2;
		public PointMass<Gaussian> vGaussian2_marginal;
		/// <summary>Field backing the vGaussian3 property</summary>
		private Gaussian VGaussian3;
		public PointMass<Gaussian> vGaussian3_marginal;
		#endregion

		#region Properties
		/// <summary>The number of iterations done from the initial state</summary>
		public int NumberOfIterationsDone
		{
			get {
				return this.numberOfIterationsDone;
			}
		}

		/// <summary>The externally-specified value of 'vbool1'</summary>
		public bool vbool1
		{
			get {
				return this.Vbool1;
			}
			set {
				if (this.Vbool1!=value) {
					this.Vbool1 = value;
					this.numberOfIterationsDone = 0;
					this.Changed_vbool1_vdouble1_vGaussian3_isDone = false;
					this.Changed_vbool1_vdouble1_vGaussian2_isDone = false;
					this.Changed_vbool1_vdouble0_vGaussian1_isDone = false;
					this.Changed_vbool1_vdouble0_vGaussian0_isDone = false;
					this.Changed_vbool1_isDone = false;
				}
			}
		}

		/// <summary>The externally-specified value of 'vdouble0'</summary>
		public double vdouble0
		{
			get {
				return this.Vdouble0;
			}
			set {
				if (this.Vdouble0!=value) {
					this.Vdouble0 = value;
					this.numberOfIterationsDone = 0;
					this.Changed_vbool1_vdouble0_vGaussian1_isDone = false;
					this.Changed_vbool1_vdouble0_vGaussian0_isDone = false;
					this.Changed_vdouble0_isDone = false;
				}
			}
		}

		/// <summary>The externally-specified value of 'vdouble1'</summary>
		public double vdouble1
		{
			get {
				return this.Vdouble1;
			}
			set {
				if (this.Vdouble1!=value) {
					this.Vdouble1 = value;
					this.numberOfIterationsDone = 0;
					this.Changed_vbool1_vdouble1_vGaussian3_isDone = false;
					this.Changed_vbool1_vdouble1_vGaussian2_isDone = false;
					this.Changed_vdouble1_isDone = false;
				}
			}
		}

		/// <summary>The externally-specified value of 'vGaussian0'</summary>
		public Gaussian vGaussian0
		{
			get {
				return this.VGaussian0;
			}
			set {
				if (this.VGaussian0!=value) {
					this.VGaussian0 = value;
					this.numberOfIterationsDone = 0;
					this.Changed_vbool1_vdouble0_vGaussian0_isDone = false;
					this.Changed_vGaussian0_isDone = false;
				}
			}
		}

		/// <summary>The externally-specified value of 'vGaussian1'</summary>
		public Gaussian vGaussian1
		{
			get {
				return this.VGaussian1;
			}
			set {
				if (this.VGaussian1!=value) {
					this.VGaussian1 = value;
					this.numberOfIterationsDone = 0;
					this.Changed_vbool1_vdouble0_vGaussian1_isDone = false;
					this.Changed_vGaussian1_isDone = false;
				}
			}
		}

		/// <summary>The externally-specified value of 'vGaussian2'</summary>
		public Gaussian vGaussian2
		{
			get {
				return this.VGaussian2;
			}
			set {
				if (this.VGaussian2!=value) {
					this.VGaussian2 = value;
					this.numberOfIterationsDone = 0;
					this.Changed_vbool1_vdouble1_vGaussian2_isDone = false;
					this.Changed_vGaussian2_isDone = false;
				}
			}
		}

		/// <summary>The externally-specified value of 'vGaussian3'</summary>
		public Gaussian vGaussian3
		{
			get {
				return this.VGaussian3;
			}
			set {
				if (this.VGaussian3!=value) {
					this.VGaussian3 = value;
					this.numberOfIterationsDone = 0;
					this.Changed_vbool1_vdouble1_vGaussian3_isDone = false;
					this.Changed_vGaussian3_isDone = false;
				}
			}
		}

		#endregion

		#region Methods
		/// <summary>Computations that depend on the observed value of vbool1</summary>
		private void Changed_vbool1()
		{
			if (this.Changed_vbool1_isDone) {
				return ;
			}
			this.vbool1_marginal = Bernoulli.Uniform();
			this.vbool1_marginal = Distribution.SetPoint<Bernoulli,bool>(this.vbool1_marginal, this.Vbool1);
			Beta vBeta0 = Beta.Uniform();
			this.vdouble14_marginal_F = Beta.Uniform();
			Beta vdouble14_use_B = default(Beta);
			// Message to 'vdouble14_use' from Bernoulli factor
			vdouble14_use_B = BernoulliFromBetaOp.ProbTrueAverageConditional(this.Vbool1);
			// Message to 'vdouble14_marginal' from Variable factor
			this.vdouble14_marginal_F = VariableOp.MarginalAverageConditional<Beta>(vdouble14_use_B, vBeta0, this.vdouble14_marginal_F);
			this.Changed_vbool1_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of vbool1 and vdouble0 and vGaussian0</summary>
		private void Changed_vbool1_vdouble0_vGaussian0()
		{
			if (this.Changed_vbool1_vdouble0_vGaussian0_isDone) {
				return ;
			}
			Gaussian vdouble4_F = default(Gaussian);
			this.vdouble4_marginal_F = Gaussian.Uniform();
			this.vdouble4_use_B = Gaussian.Uniform();
			// Message to 'vdouble4' from GaussianFromMeanAndVariance factor
			vdouble4_F = GaussianFromMeanAndVarianceOp.SampleAverageConditional(0.0, 10.0);
			Gaussian[] vdouble4_uses_B;
			// Create array for 'vdouble4_uses' Backwards messages.
			vdouble4_uses_B = new Gaussian[2];
			vdouble4_uses_B[1] = Gaussian.Uniform();
			vdouble4_uses_B[0] = Gaussian.Uniform();
			// Message to 'vdouble4_uses' from EqualRandom factor
			vdouble4_uses_B[0] = ArrayHelper.SetTo<Gaussian>(vdouble4_uses_B[0], this.VGaussian0);
			Gaussian vdouble4_1__B = default(Gaussian);
			if (!this.Vbool1) {
				// Message to 'vdouble4_1_' from GaussianFromMeanAndVariance factor
				vdouble4_1__B = GaussianFromMeanAndVarianceOp.MeanAverageConditional(this.Vdouble0, 1.0);
				// Message to 'vdouble4_uses' from Copy factor
				vdouble4_uses_B[1] = ArrayHelper.SetTo<Gaussian>(vdouble4_uses_B[1], vdouble4_1__B);
			}
			// Message to 'vdouble4_use' from Replicate factor
			this.vdouble4_use_B = ReplicateOp_NoDivide.DefAverageConditional<Gaussian>(vdouble4_uses_B, this.vdouble4_use_B);
			// Message to 'vdouble4_marginal' from Variable factor
			this.vdouble4_marginal_F = VariableOp.MarginalAverageConditional<Gaussian>(this.vdouble4_use_B, vdouble4_F, this.vdouble4_marginal_F);
			this.Changed_vbool1_vdouble0_vGaussian0_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of vbool1 and vdouble0 and vGaussian1</summary>
		private void Changed_vbool1_vdouble0_vGaussian1()
		{
			if (this.Changed_vbool1_vdouble0_vGaussian1_isDone) {
				return ;
			}
			Gaussian vdouble7_F = default(Gaussian);
			this.vdouble7_marginal_F = Gaussian.Uniform();
			this.vdouble7_use_B = Gaussian.Uniform();
			// Message to 'vdouble7' from GaussianFromMeanAndVariance factor
			vdouble7_F = GaussianFromMeanAndVarianceOp.SampleAverageConditional(0.0, 10.0);
			Gaussian[] vdouble7_uses_B;
			// Create array for 'vdouble7_uses' Backwards messages.
			vdouble7_uses_B = new Gaussian[2];
			vdouble7_uses_B[1] = Gaussian.Uniform();
			vdouble7_uses_B[0] = Gaussian.Uniform();
			// Message to 'vdouble7_uses' from EqualRandom factor
			vdouble7_uses_B[0] = ArrayHelper.SetTo<Gaussian>(vdouble7_uses_B[0], this.VGaussian1);
			Gaussian vdouble7_0__B = default(Gaussian);
			if (this.Vbool1) {
				// Message to 'vdouble7_0_' from GaussianFromMeanAndVariance factor
				vdouble7_0__B = GaussianFromMeanAndVarianceOp.MeanAverageConditional(this.Vdouble0, 1.0);
				// Message to 'vdouble7_uses' from Copy factor
				vdouble7_uses_B[1] = ArrayHelper.SetTo<Gaussian>(vdouble7_uses_B[1], vdouble7_0__B);
			}
			// Message to 'vdouble7_use' from Replicate factor
			this.vdouble7_use_B = ReplicateOp_NoDivide.DefAverageConditional<Gaussian>(vdouble7_uses_B, this.vdouble7_use_B);
			// Message to 'vdouble7_marginal' from Variable factor
			this.vdouble7_marginal_F = VariableOp.MarginalAverageConditional<Gaussian>(this.vdouble7_use_B, vdouble7_F, this.vdouble7_marginal_F);
			this.Changed_vbool1_vdouble0_vGaussian1_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of vbool1 and vdouble1 and vGaussian2</summary>
		private void Changed_vbool1_vdouble1_vGaussian2()
		{
			if (this.Changed_vbool1_vdouble1_vGaussian2_isDone) {
				return ;
			}
			Gaussian vdouble10_F = default(Gaussian);
			this.vdouble10_marginal_F = Gaussian.Uniform();
			this.vdouble10_use_B = Gaussian.Uniform();
			// Message to 'vdouble10' from GaussianFromMeanAndVariance factor
			vdouble10_F = GaussianFromMeanAndVarianceOp.SampleAverageConditional(0.0, 10.0);
			Gaussian[] vdouble10_uses_B;
			// Create array for 'vdouble10_uses' Backwards messages.
			vdouble10_uses_B = new Gaussian[2];
			vdouble10_uses_B[1] = Gaussian.Uniform();
			vdouble10_uses_B[0] = Gaussian.Uniform();
			// Message to 'vdouble10_uses' from EqualRandom factor
			vdouble10_uses_B[0] = ArrayHelper.SetTo<Gaussian>(vdouble10_uses_B[0], this.VGaussian2);
			Gaussian vdouble10_1__B = default(Gaussian);
			if (!this.Vbool1) {
				// Message to 'vdouble10_1_' from GaussianFromMeanAndVariance factor
				vdouble10_1__B = GaussianFromMeanAndVarianceOp.MeanAverageConditional(this.Vdouble1, 1.0);
				// Message to 'vdouble10_uses' from Copy factor
				vdouble10_uses_B[1] = ArrayHelper.SetTo<Gaussian>(vdouble10_uses_B[1], vdouble10_1__B);
			}
			// Message to 'vdouble10_use' from Replicate factor
			this.vdouble10_use_B = ReplicateOp_NoDivide.DefAverageConditional<Gaussian>(vdouble10_uses_B, this.vdouble10_use_B);
			// Message to 'vdouble10_marginal' from Variable factor
			this.vdouble10_marginal_F = VariableOp.MarginalAverageConditional<Gaussian>(this.vdouble10_use_B, vdouble10_F, this.vdouble10_marginal_F);
			this.Changed_vbool1_vdouble1_vGaussian2_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of vbool1 and vdouble1 and vGaussian3</summary>
		private void Changed_vbool1_vdouble1_vGaussian3()
		{
			if (this.Changed_vbool1_vdouble1_vGaussian3_isDone) {
				return ;
			}
			Gaussian vdouble13_F = default(Gaussian);
			this.vdouble13_marginal_F = Gaussian.Uniform();
			this.vdouble13_use_B = Gaussian.Uniform();
			// Message to 'vdouble13' from GaussianFromMeanAndVariance factor
			vdouble13_F = GaussianFromMeanAndVarianceOp.SampleAverageConditional(0.0, 10.0);
			Gaussian[] vdouble13_uses_B;
			// Create array for 'vdouble13_uses' Backwards messages.
			vdouble13_uses_B = new Gaussian[2];
			vdouble13_uses_B[1] = Gaussian.Uniform();
			vdouble13_uses_B[0] = Gaussian.Uniform();
			// Message to 'vdouble13_uses' from EqualRandom factor
			vdouble13_uses_B[0] = ArrayHelper.SetTo<Gaussian>(vdouble13_uses_B[0], this.VGaussian3);
			Gaussian vdouble13_0__B = default(Gaussian);
			if (this.Vbool1) {
				// Message to 'vdouble13_0_' from GaussianFromMeanAndVariance factor
				vdouble13_0__B = GaussianFromMeanAndVarianceOp.MeanAverageConditional(this.Vdouble1, 1.0);
				// Message to 'vdouble13_uses' from Copy factor
				vdouble13_uses_B[1] = ArrayHelper.SetTo<Gaussian>(vdouble13_uses_B[1], vdouble13_0__B);
			}
			// Message to 'vdouble13_use' from Replicate factor
			this.vdouble13_use_B = ReplicateOp_NoDivide.DefAverageConditional<Gaussian>(vdouble13_uses_B, this.vdouble13_use_B);
			// Message to 'vdouble13_marginal' from Variable factor
			this.vdouble13_marginal_F = VariableOp.MarginalAverageConditional<Gaussian>(this.vdouble13_use_B, vdouble13_F, this.vdouble13_marginal_F);
			this.Changed_vbool1_vdouble1_vGaussian3_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of vdouble0</summary>
		private void Changed_vdouble0()
		{
			if (this.Changed_vdouble0_isDone) {
				return ;
			}
			this.vdouble0_marginal = Gaussian.Uniform();
			this.vdouble0_marginal = Distribution.SetPoint<Gaussian,double>(this.vdouble0_marginal, this.Vdouble0);
			this.Changed_vdouble0_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of vdouble1</summary>
		private void Changed_vdouble1()
		{
			if (this.Changed_vdouble1_isDone) {
				return ;
			}
			this.vdouble1_marginal = Gaussian.Uniform();
			this.vdouble1_marginal = Distribution.SetPoint<Gaussian,double>(this.vdouble1_marginal, this.Vdouble1);
			this.Changed_vdouble1_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of vGaussian0</summary>
		private void Changed_vGaussian0()
		{
			if (this.Changed_vGaussian0_isDone) {
				return ;
			}
			this.vGaussian0_marginal = new PointMass<Gaussian>(this.VGaussian0);
			this.Changed_vGaussian0_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of vGaussian1</summary>
		private void Changed_vGaussian1()
		{
			if (this.Changed_vGaussian1_isDone) {
				return ;
			}
			this.vGaussian1_marginal = new PointMass<Gaussian>(this.VGaussian1);
			this.Changed_vGaussian1_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of vGaussian2</summary>
		private void Changed_vGaussian2()
		{
			if (this.Changed_vGaussian2_isDone) {
				return ;
			}
			this.vGaussian2_marginal = new PointMass<Gaussian>(this.VGaussian2);
			this.Changed_vGaussian2_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of vGaussian3</summary>
		private void Changed_vGaussian3()
		{
			if (this.Changed_vGaussian3_isDone) {
				return ;
			}
			this.vGaussian3_marginal = new PointMass<Gaussian>(this.VGaussian3);
			this.Changed_vGaussian3_isDone = true;
		}

		/// <summary>Update all marginals, by iterating message passing the given number of times</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		/// <param name="initialise">If true, messages that initialise loops are reset when observed values change</param>
		private void Execute(int numberOfIterations, bool initialise)
		{
			this.Changed_vbool1_vdouble1_vGaussian3();
			this.Changed_vbool1_vdouble1_vGaussian2();
			this.Changed_vbool1_vdouble0_vGaussian1();
			this.Changed_vbool1_vdouble0_vGaussian0();
			this.Changed_vbool1();
			this.Changed_vGaussian3();
			this.Changed_vGaussian2();
			this.Changed_vGaussian1();
			this.Changed_vGaussian0();
			this.Changed_vdouble1();
			this.Changed_vdouble0();
			this.numberOfIterationsDone = numberOfIterations;
		}

		/// <summary>Update all marginals, by iterating message-passing the given number of times</summary>
		/// <param name="numberOfIterations">The total number of iterations that should be executed for the current set of observed values.  If this is more than the number already done, only the extra iterations are done.  If this is less than the number already done, message-passing is restarted from the beginning.  Changing the observed values resets the iteration count to 0.</param>
		public void Execute(int numberOfIterations)
		{
			this.Execute(numberOfIterations, true);
		}

		/// <summary>Get the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		public object GetObservedValue(string variableName)
		{
			if (variableName=="vdouble0") {
				return this.vdouble0;
			}
			if (variableName=="vdouble1") {
				return this.vdouble1;
			}
			if (variableName=="vGaussian0") {
				return this.vGaussian0;
			}
			if (variableName=="vGaussian1") {
				return this.vGaussian1;
			}
			if (variableName=="vGaussian2") {
				return this.vGaussian2;
			}
			if (variableName=="vGaussian3") {
				return this.vGaussian3;
			}
			if (variableName=="vbool1") {
				return this.vbool1;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName)
		{
			if (variableName=="vdouble13") {
				return this.Vdouble13Marginal();
			}
			if (variableName=="vdouble10") {
				return this.Vdouble10Marginal();
			}
			if (variableName=="vdouble7") {
				return this.Vdouble7Marginal();
			}
			if (variableName=="vdouble4") {
				return this.Vdouble4Marginal();
			}
			if (variableName=="vbool1") {
				return this.Vbool1Marginal();
			}
			if (variableName=="vdouble14") {
				return this.Vdouble14Marginal();
			}
			if (variableName=="vGaussian3") {
				return this.VGaussian3Marginal();
			}
			if (variableName=="vGaussian2") {
				return this.VGaussian2Marginal();
			}
			if (variableName=="vGaussian1") {
				return this.VGaussian1Marginal();
			}
			if (variableName=="vGaussian0") {
				return this.VGaussian0Marginal();
			}
			if (variableName=="vdouble1") {
				return this.Vdouble1Marginal();
			}
			if (variableName=="vdouble0") {
				return this.Vdouble0Marginal();
			}
			throw new ArgumentException("This class was not built to infer "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName));
		}

		/// <summary>Get the query-specific marginal distribution of a variable.</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName, string query)
		{
			if (query=="Marginal") {
				return this.Marginal(variableName);
			}
			if ((variableName=="vdouble13")&&(query=="MarginalDividedByPrior")) {
				return this.Vdouble13MarginalDividedByPrior();
			}
			if ((variableName=="vdouble10")&&(query=="MarginalDividedByPrior")) {
				return this.Vdouble10MarginalDividedByPrior();
			}
			if ((variableName=="vdouble7")&&(query=="MarginalDividedByPrior")) {
				return this.Vdouble7MarginalDividedByPrior();
			}
			if ((variableName=="vdouble4")&&(query=="MarginalDividedByPrior")) {
				return this.Vdouble4MarginalDividedByPrior();
			}
			throw new ArgumentException(((("This class was not built to infer \'"+variableName)+"\' with query \'")+query)+"\'");
		}

		/// <summary>Get the query-specific marginal distribution of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName, string query)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName, query));
		}

		private void OnProgressChanged(ProgressChangedEventArgs e)
		{
			// Make a temporary copy of the event to avoid a race condition
			// if the last subscriber unsubscribes immediately after the null check and before the event is raised.
			EventHandler<ProgressChangedEventArgs> handler = this.ProgressChanged;
			if (handler!=null) {
				handler(this, e);
			}
		}

		/// <summary>Reset all messages to their initial values.  Sets NumberOfIterationsDone to 0.</summary>
		public void Reset()
		{
			this.Execute(0);
		}

		/// <summary>Set the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		/// <param name="value">Observed value</param>
		public void SetObservedValue(string variableName, object value)
		{
			if (variableName=="vdouble0") {
				this.vdouble0 = (double)value;
				return ;
			}
			if (variableName=="vdouble1") {
				this.vdouble1 = (double)value;
				return ;
			}
			if (variableName=="vGaussian0") {
				this.vGaussian0 = (Gaussian)value;
				return ;
			}
			if (variableName=="vGaussian1") {
				this.vGaussian1 = (Gaussian)value;
				return ;
			}
			if (variableName=="vGaussian2") {
				this.vGaussian2 = (Gaussian)value;
				return ;
			}
			if (variableName=="vGaussian3") {
				this.vGaussian3 = (Gaussian)value;
				return ;
			}
			if (variableName=="vbool1") {
				this.vbool1 = (bool)value;
				return ;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>Update all marginals, by iterating message-passing an additional number of times</summary>
		/// <param name="additionalIterations">The number of iterations that should be executed, starting from the current message state.  Messages are not reset, even if observed values have changed.</param>
		public void Update(int additionalIterations)
		{
			this.Execute(checked(this.numberOfIterationsDone+additionalIterations), false);
		}

		/// <summary>
		/// Returns the marginal distribution for 'vbool1' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli Vbool1Marginal()
		{
			return this.vbool1_marginal;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble0' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Gaussian Vdouble0Marginal()
		{
			return this.vdouble0_marginal;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble10' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Gaussian Vdouble10Marginal()
		{
			return this.vdouble10_marginal_F;
		}

		/// <summary>
		/// Returns the output message (the posterior divided by the prior) for 'vdouble10' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The output message (the posterior divided by the prior)</returns>
		public Gaussian Vdouble10MarginalDividedByPrior()
		{
			return this.vdouble10_use_B;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble13' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Gaussian Vdouble13Marginal()
		{
			return this.vdouble13_marginal_F;
		}

		/// <summary>
		/// Returns the output message (the posterior divided by the prior) for 'vdouble13' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The output message (the posterior divided by the prior)</returns>
		public Gaussian Vdouble13MarginalDividedByPrior()
		{
			return this.vdouble13_use_B;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble14' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Beta Vdouble14Marginal()
		{
			return this.vdouble14_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble1' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Gaussian Vdouble1Marginal()
		{
			return this.vdouble1_marginal;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble4' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Gaussian Vdouble4Marginal()
		{
			return this.vdouble4_marginal_F;
		}

		/// <summary>
		/// Returns the output message (the posterior divided by the prior) for 'vdouble4' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The output message (the posterior divided by the prior)</returns>
		public Gaussian Vdouble4MarginalDividedByPrior()
		{
			return this.vdouble4_use_B;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble7' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Gaussian Vdouble7Marginal()
		{
			return this.vdouble7_marginal_F;
		}

		/// <summary>
		/// Returns the output message (the posterior divided by the prior) for 'vdouble7' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The output message (the posterior divided by the prior)</returns>
		public Gaussian Vdouble7MarginalDividedByPrior()
		{
			return this.vdouble7_use_B;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vGaussian0' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<Gaussian> VGaussian0Marginal()
		{
			return this.vGaussian0_marginal;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vGaussian1' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<Gaussian> VGaussian1Marginal()
		{
			return this.vGaussian1_marginal;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vGaussian2' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<Gaussian> VGaussian2Marginal()
		{
			return this.vGaussian2_marginal;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vGaussian3' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<Gaussian> VGaussian3Marginal()
		{
			return this.vGaussian3_marginal;
		}

		#endregion

		#region Events
		/// <summary>Event that is fired when the progress of inference changes, typically at the end of one iteration of the inference algorithm.</summary>
		public event EventHandler<ProgressChangedEventArgs> ProgressChanged;
		#endregion

	}

}
